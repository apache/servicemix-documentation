h1. Using Camel

Now that we know how to operate Apache ServiceMix through the shell console, it's time to start using it for what it is built for.  Let's build our very first integration solution with a Camel route and deploy it on ServiceMix.

h2. Our simple scenario
In this simple scenario, we're going to move files from an input directory called {{camel/input}} to an output directory called {{camel/output}}.  To ensure we can keep track of which files get moved, we'll also write a message to the log file whenever we move a file.

h2. Creating the route
One of the most simple ways to deploy a new route on ServiceMix, is by defining the route in a Blueprint XML file.

{pygmentize:lang=xml}
<?xml version="1.0" encoding="UTF-8"?>
<blueprint
    xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
      http://www.osgi.org/xmlns/blueprint/v1.0.0
      http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <camelContext xmlns="http://camel.apache.org/schema/blueprint">
      <route>
        <from uri="file:camel/input"/>
        <log message="Moving ${file:name} to the output directory"/>
        <to uri="file:camel/output"/>
      </route>
    </camelContext>

</blueprint>
{pygmentize}

h2. Deploying the route
In order to deploy and start the route, just copy the XML file you created into ServiceMix' {{deploy}} directory.  The file will get picked up and deployed by ServiceMix.  You will see a {{camel/input}} folder appear in your ServiceMix installation directory and any files you copy into that directory will get moved into the {{camel/output}} directory.

If you do a {{log:display}} in the shell, you will also see the log output for every file that's been moved.

!/quickstart/images/camel-sample-log.png!

h2. Using the shell to manage the route

Using {{bundle:list}}, you'll notice that your XML file has been transformed into a bundle and that the Blueprint container has been created to start your Camel route.

!/quickstart/images/camel-sample-deploy.png!

From this output, you also learn that the bundle id for your XML file is 200.  This allow you to start and stop the route whenever necessary.  Let's give this a go now...

First, stop the route with
{pygmentize:lang=text}
karaf@root> bundle:stop 200
{pygmentize}

The route is no longer active, so any files you copy into the {{orders/input}} folder will remain there for now.  As soon as you restart the route, the pending files will get moving again.

{pygmentize:lang=text}
karaf@root> bundle:start 200
{pygmentize}

